{{- func write_properties }}
            {{- for prop in $0.Properties }}
            {{ $0.VariableName ?? "this" }}.{{ prop.Member.Name }}{{ " = " }}
            {{- if prop.Value.IsCode || prop.DisplayType == "string" -}}
                {{ prop.Value.CodeString }};
            {{- else if prop.Converter -}}
                WebActivator.ParseAttribute<{{ prop.DisplayType }}, {{ prop.DisplayConverter }}>({{ prop.Value.CodeString }});
            {{- else -}}
                WebActivator.ParseAttribute<{{ prop.DisplayType }}>({{ prop.Value.CodeString }});
            {{- end }}
            {{- end }}
{{- end }}

{{- func write_attributes }}
            {{- write_properties $0 }}

            {{- for prop in $0.Attributes }}
            ((WebFormsCore.UI.IAttributeAccessor){{ $0.VariableName }}).SetAttribute({{ prop.Key.CodeString }}, {{ prop.Value.CodeString }});
            {{- end }}

            {{- for prop in $0.Templates }}
            {{ $0.VariableName }}.{{ prop.Property }} = new {{ prop.ClassName }}(WebActivator, this);
            {{- end }}

            {{- for prop in $0.Events }}
            {{- if IsReturnTypeSame }}
            {{ $0.VariableName }}.{{ prop.EventName }} += {{ $3 }}{{ prop.MethodName }};
            {{- else }}
            {{ $0.VariableName }}.{{ prop.EventName }} += ({{ prop.Arguments }}) =>
            {
                {{ if !prop.IsVoid }}var result = {{ end -}}
                {{ $1 }}{{- prop.MethodName }}({{ prop.Arguments }});
                return {{ prop.ReturnValue }};
            };
            {{- end }}
            {{- end }}
{{- end }}

{{- func write_children }}
        {{- for child in $0 }}
        {{- case child.Type }}

        {{- when "Directive" }}
            {{- write_properties child "child" }}

        {{- when "Collection" }}
            var {{ child.VariableName }} = {{ child.Parent?.VariableName ?? $1 }}.{{ child.Property }};
            {{ write_attributes child $2 }}

        {{- when "Text" }}
            {{ if child.Parent?.Type != "Collection" -}}
            {{ child.Parent?.VariableName ?? $1 }}.AddParsedSubObject(WebActivator.CreateLiteral({{ child.Text.CodeString }}));
            {{- end }}

        {{- when "Control" }}
            {{- if child.ControlPath }}
            var {{ child.VariableName }} = ({{ child.DisplayControlType }}) WebActivator.CreateControl("{{ child.ControlPath }}");
            {{- else }}
            var {{ child.VariableName }} = WebActivator.CreateControl<{{ child.DisplayControlType }}>();
            {{- end }}
            {{- if child.Id }}
            {{ child.VariableName }}.ID = "{{ child.Id }}";
            {{- end }}
            {{ child.Parent?.VariableName ?? $1 }}.{{ child.Parent?.Type == "Collection" ? "Add" : "AddParsedSubObject" }}({{ child.VariableName }});

            {{ write_attributes child $2 }}

        {{- when "Element" }}
            var {{ child.VariableName }} = WebActivator.CreateElement({{ child.Name.CodeString }});
            {{ child.Parent?.VariableName ?? $1 }}.AddParsedSubObject({{ child.VariableName }});

            {{- for prop in child.Attributes }}
            {{ child.VariableName }}.Attributes.Add({{ prop.Key.CodeString }}, {{ prop.Value.CodeString }});
            {{- end }}
        {{- else }}
            // Unhandled type: {{ child.Type }}
        {{- end }}

        {{- if child.RenderName }}
            {{ child.VariableName }}.SetRenderMethodDelegate({{ child.RenderName }});
        {{- end }}

        {{- if child.FieldName }}
            {{ $1 }}.{{ child.FieldName }} = {{ child.VariableName }};
        {{- end }}
        {{- end }}
{{-end}}

{{- func write_methods }}
        {{- for render in $0.RenderMethods }}

        private async System.Threading.Tasks.Task {{ render.RenderName }}(WebFormsCore.UI.HtmlTextWriter writer, WebFormsCore.UI.ControlCollection controls, System.Threading.CancellationToken token)
        {
            {{- i = 0 }}
            {{- for child in render.Children }}
            {{- case child.Type }}
            {{- when "Statement" }}
#line {{ child.Range.Start.Line + 1 }} "{{ child.Range.File }}"
{{ child.Text.Range.Start.ColumnOffsetString }}{{ child.Text }}
#line default
            {{- when "Expression" }}
            await writer.WriteObjectAsync(
#line {{ child.Range.Start.Line + 1 }} "{{ child.Range.File }}"
{{ child.Text.Range.Start.ColumnOffsetString }}{{ child.Text }}
#line default
            , {{ child.IsEncode ? "true" : "false"}});
            {{- when "Text" }}
            await controls[{{ i }}].RenderAsync(writer, token); // Text: {{ child.Text.CodeString }}
            {{- i = i + 1 }}
            {{- when "Element", "Control" }}
            await controls[{{ i }}].RenderAsync(writer, token); // Element: {{ child.Name }}
            {{- i = i + 1 }}
            {{- end }}
            {{- end }}
        }
        {{- end }}
{{- end }}
#pragma warning disable CS8600 // Converting null literal or possible null value to non-nullable type.
#pragma warning disable CS8601 // Possible null reference assignment.
#pragma warning disable IL2072 // DynamicallyAccessedMemberTypes

{{ for type in Types -}}
[assembly:WebFormsCore.AssemblyViewAttribute(@"{{ type.RelativePath }}", typeof({{ type.Namespace ? (type.Namespace + ".") : ""  }}CompiledViews_{{ type.AssemblyName }}.{{ type.ClassName }}))]
{{ if type.Namespace }}
namespace {{ type.Namespace }}
{
{{ end }}
{{- for ns in type.Namespaces }}
using {{ ns }};
{{- end }}

{{- if AddFields && type.AddFields }}
[WebFormsCore.ViewPath(@"{{ type.RelativePath }}")]
partial class {{ type.InheritsClassName }}
{
{{- for prop in type.Ids }}
{{- if !prop.Designer }}
    protected {{ prop.DisplayType }} {{ prop.Name }} = default!;
{{- end }}
{{- end }}

    {{- for template in type.Templates }}
    {{- if template.ControlsType }}

    public class {{ template.ControlsType }} : WebFormsCore.UI.ITemplateControls
    {
    {{- for prop in template.Ids }}
        public {{ prop.DisplayType }} {{ prop.Name }} = default!;
    {{- end }}

        public void Load(WebFormsCore.UI.Control container)
        {
        {{- for prop in template.Ids }}
            {{~ "            " }}{{ prop.Name }} = ({{ prop.DisplayType }})container.FindControl("{{ prop.Name }}")!;
        {{- end }}
        }
    }
    {{- end }}
    {{- end }}
}
{{- end }}

public partial class CompiledViews_{{ type.AssemblyName }}
{
    [WebFormsCore.CompiledView(@"{{ type.RelativePath }}", "{{ type.Hash }}")]
    {{- for file in type.IncludeFiles }}
    [WebFormsCore.CompiledViewInclude(@"{{ file.Path }}", "{{ file.Hash }}")]
    {{- end }}
    public class {{ type.ClassName }} : {{ type.InheritsClassName }}
    {
        {{- for constructor in type.Constructors }}
        public {{ type.ClassName }}({{- constructor.Parameters -}})
            : base({{- constructor.Arguments -}})
        {
        }
        {{ end -}}

        {{- for prop in type.Ids }}
        {{- if prop.Designer }}
        protected {{ prop.Member ? "new " : "" }}{{ prop.DisplayType }} {{ prop.Name }} = default!;
        {{- end }}
        {{- end }}

        {{- if type.Path }}

        public override string AppFullPath => @"{{ type.Path }}";
        {{- end }}

        {{- if type.RelativePath }}

        public override string AppRelativeVirtualPath => @"{{ type.RelativePath }}";
        {{- end }}

        {{- if type.Directory }}

        public override string TemplateSourceDirectory => @"{{ type.Directory }}";
        {{- end }}

        {{- for text in type.ScriptBlocks }}
#line {{ text.Range.Start.Line + 1 }} "{{ text.Range.File }}"
{{ text.Text }}
#line hidden
        {{- end }}

        {{- write_methods type }}

        protected override void FrameworkInitialize()
        {
            base.FrameworkInitialize();
            {{- if type.RenderName }}
            SetRenderMethodDelegate({{ type.RenderName }});
            {{- end }}
            {{ write_children type.AllChildren "this" }}
        }

        {{- for template in type.Templates }}
        public class {{ template.ClassName }} : WebFormsCore.UI.ITemplate
        {
            private readonly {{ type.ClassName }} _parent;

            public {{ template.ClassName }}(WebFormsCore.IWebObjectActivator webActivator, {{ type.ClassName }} parent)
            {
                WebActivator = webActivator;
                _parent = parent;
            }

            public WebFormsCore.IWebObjectActivator WebActivator { get; }

            {{- write_methods template }}

            public void InstantiateIn(WebFormsCore.UI.Control container)
            {
                {{ write_children template.AllChildren "container" "_parent." }}
            }
        }
        {{- end }}
    }
}
{{- if type.Namespace }}

}
{{- end }}
{{- end }}
{{- end }}
