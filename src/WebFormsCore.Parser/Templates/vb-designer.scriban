{{- func write_properties }}
            {{- for prop in $0.Properties }}
            {{ $0.VariableName ?? "Me" }}.{{ prop.Member.Name }}{{ " = " }}
            {{- if prop.Value.IsCode || prop.DisplayType == "string" -}}
                {{ prop.Value.CodeString }}
            {{- else if prop.Converter -}}
                WebActivator.ParseAttribute(Of {{ prop.DisplayType }}, Of {{ prop.DisplayConverter }})({{ prop.Value.CodeString }})
            {{- else -}}
                WebActivator.ParseAttribute(Of {{ prop.DisplayType }})({{ prop.Value.CodeString }})
            {{- end }}
            {{- end }}
{{- end }}

{{- func write_attributes }}
            {{- write_properties $0 }}

            {{- for prop in $0.Attributes }}
            DirectCast({{ $0.VariableName }}, WebFormsCore.UI.IAttributeAccessor).SetAttribute({{ prop.Key.VbCodeString }}, {{ prop.Value.VbCodeString }})
            {{- end }}

            {{- for prop in $0.Templates }}
            {{ $0.VariableName }}.{{ prop.Property }} = new {{ prop.ClassName }}(WebActivator, Me)
            {{- end }}

            {{- for prop in $0.Events }}
            {{- if IsReturnTypeSame }}
            {{ $0.VariableName }}.{{ prop.EventName }} += {{ $3 }}{{ prop.MethodName }}
            {{- else }}
            AddHandler {{ $0.VariableName }}.{{ prop.EventName }}, Function({{ prop.Arguments }})
                {{ if !prop.IsVoid }}Dim result = {{ end -}}
                {{ $1 }}{{- prop.MethodName }}({{ prop.Arguments }})
                Return {{ prop.ReturnValue }}
            End function
            {{- end }}
            {{- end }}
{{- end }}

{{ func write_children }}
        {{- for child in $0 }}
        {{- case child.Type }}

        {{- when "Directive" }}
            {{- write_properties child "child" }}

        {{- when "Collection" }}
            Dim {{ child.VariableName }} = {{ child.Parent?.VariableName ?? $1 }}.{{ child.Property }}
            {{ write_attributes child $3 }}

        {{- when "Text" }}
            {{ if child.Parent?.Type != "Collection" -}}
            {{ child.Parent?.VariableName ?? $1 }}.AddParsedSubObject(WebActivator.CreateLiteral({{ child.Text.VbCodeString }}))
            {{- end }}

        {{- when "Control" }}
            {{- if child.ControlPath }}
            Dim {{ child.VariableName }} = DirectCast(WebActivator.CreateControl("{{ child.ControlPath }}"), {{ child.DisplayControlType }})
            {{- else }}
            Dim {{ child.VariableName }} = WebActivator.CreateControl(Of {{ child.DisplayControlType }})()
            {{- end }}
            {{- if child.Id }}
            {{ child.VariableName }}.ID = "{{ child.Id }}"
            {{- end }}
            {{ child.Parent?.VariableName ?? $1 }}.AddParsedSubObject({{ child.VariableName }})

            {{ write_attributes child $3 }}

        {{- when "Element" }}
            Dim {{ child.VariableName }} = WebActivator.CreateElement({{ child.Name.VbCodeString }})
            {{ child.Parent?.VariableName ?? $1 }}.AddParsedSubObject({{ child.VariableName }})

            {{- for prop in child.Attributes }}
            {{ child.VariableName }}.Attributes.Add({{ prop.Key.VbCodeString }}, {{ prop.Value.VbCodeString }})
            {{- end }}
        {{- else }}
            ' Unhandled type: {{ child.Type }}
        {{- end }}

        {{- if child.RenderName }}
            {{ child.VariableName }}.SetRenderMethodDelegate(AddressOf {{ child.RenderName }})
        {{- end }}

        {{- if $2 && child.FieldName }}
            {{ $1 }}.{{ child.FieldName }} = {{ child.VariableName }}
        {{- end }}
        {{- end }}
{{-end}}

{{- func write_methods }}
        {{- for render in $0.RenderMethods }}

        Private Async Function {{ render.RenderName }}(writer As WebFormsCore.UI.HtmlTextWriter, controls As WebFormsCore.UI.ControlCollection, token As System.Threading.CancellationToken) As System.Threading.Tasks.Task
            {{- i = 0 }}
            {{- for child in render.Children }}
            {{- case child.Type }}
            {{- when "Statement" }}
            {{ child.Text }}
            {{- when "Expression" }}
            Await writer.WriteObjectAsync({{ child.Text }})
            {{- when "Text" }}
            Await controls({{ i }}).RenderAsync(writer, token) ' Text: {{ child.Text.CodeString }}
            {{- i = i + 1 }}
            {{- when "Element", "Control" }}
            Await controls({{ i }}).RenderAsync(writer, token) ' Element: {{ child.Name }}
            {{- i = i + 1 }}
            {{- end }}
            {{- end }}
        End Function
        {{- end }}
{{- end }}
Imports Microsoft.VisualBasic

{{- if RootNamespace }}
<Assembly:WebFormsCore.RootNamespaceAttribute("{{ RootNamespace }}")>
{{- end }}
{{- for type in Types }}
<Assembly:WebFormsCore.AssemblyViewAttribute("{{ type.Path }}", GetType({{ type.Namespace ? (type.Namespace + ".") : "" }}CompiledViews_{{ type.AssemblyName }}.{{ type.ClassName }}))>
{{- end }}

{{- for type in Types }}
{{- if type.VbNamespace }}
Namespace {{ type.VbNamespace }}
{{- end }}

{{- for ns in type.Namespaces }}
Imports {{ ns }}
{{- end }}

{{- if AddFields }}
<WebFormsCore.ViewPath("{{ type.Path }}")>
Partial Class {{ type.InheritsClassName }}
{{- for prop in type.Ids }}
{{- if !prop.Designer }}
    Protected {{ prop.Name }} As {{ prop.DisplayType }}
{{- end }}
{{- end }}

    {{- for template in type.Templates }}
    {{- if template.ControlsType }}

    Public Class {{ template.ControlsType }}
        Implements WebFormsCore.UI.ITemplateControls
    {{- for prop in template.Ids }}
        Public {{ prop.Name }} As {{ prop.DisplayType }}
    {{- end }}

        Public Sub Load(container As WebFormsCore.UI.Control) Implements WebFormsCore.UI.ITemplateControls.Load
        {{- for prop in template.Ids }}
            {{ prop.Name }} = DirectCast(container.FindControl("{{ prop.Name }}"), {{ prop.DisplayType }})
        {{- end }}
        End Sub
    End Class
    {{- end }}
    {{- end }}
End Class
{{- end }}

Public Partial Class CompiledViews_{{ type.AssemblyName }}
    

     <WebFormsCore.CompiledView("{{ type.Path }}", "{{ type.Hash }}")>
     Public Class {{ type.ClassName }}
        Inherits {{ type.InheritsClassName }}

        {{- for prop in type.Ids }}
	{{- if prop.Designer }}
	Protected {{ prop.Member ? "Shadows " : "" }}{{ prop.Name }} As {{ prop.DisplayType }}
	{{- end }}
	{{- end }}
	
	{{- write_methods type }}

        {{- if type.Path }}

        Public Overrides ReadOnly Property AppRelativeVirtualPath As String
            Get
                Return "{{ type.Path }}"
            End Get
        End Property
        {{- end }}

        {{- if type.Directory }}

        Public Overrides ReadOnly Property TemplateSourceDirectory As String
            Get
                Return "{{ type.Directory }}"
            End Get
        End Property
        {{- end }}

        {{- for text in type.ScriptBlocks }}
{{ text.Text }}
        {{- end }}

        Protected Overrides Sub FrameworkInitialize()
            MyBase.FrameworkInitialize()
            {{- if type.RenderName }}
            SetRenderMethodDelegate(AddressOf {{ type.RenderName }})
            {{- end }}
            {{ write_children type.AllChildren "Me" true }}
        End Sub
	
        {{- for template in type.Templates }}
        Public Class {{ template.ClassName }}
            Implements WebFormsCore.UI.ITemplate

	        Private ReadOnly _parent As {{ type.ClassName }}

            Public Sub New(webActivator As WebFormsCore.IWebObjectActivator, parent As {{ type.ClassName }})
                Me.WebActivator = webActivator
		        Me._parent = parent
            End Sub

            Public WebActivator As WebFormsCore.IWebObjectActivator

            {{- write_methods template }}

            Public Sub InstantiateIn(container As WebFormsCore.UI.Control) Implements WebFormsCore.UI.ITemplate.InstantiateIn
                {{ write_children template.AllChildren "container" false "_parent." }}
            End Sub
        End Class
        {{- end }}
    End Class
End Class
{{- if type.VbNamespace }}
End Namespace
{{- end }}
{{- end }}
